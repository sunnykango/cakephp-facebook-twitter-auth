 public function loginwith($provider = "facebook") {

        $this->autoRender = false;
        $this->loadModel('User');
        $this->User->recursive = -1;
        if ($provider == "facebook") {
            require_once( INCLUDE_PATH . 'socialapp/facebook/facebook.php' );
            $facebook = new Facebook(array(
                'appId' => $this->facebookAppId,
                'secret' => $this->facebookSecret,
            ));
// Get User ID
            $user = $facebook->getUser();
            if ($user) {///user is logged in
                try {
                    $user_profile = $facebook->api('/me');
                    if (isset($user_profile) and ($user_profile)) {
                        $this->loadModel('User');
                        $existingUser = $this->User->find('first', array('conditions' => array('User.fb_id' => $user_profile['id'], 'User.loginby' => 'facebook')));
                        /*
                         * find user in database with facebook id
                         */
                        if (isset($existingUser['User']) and ($existingUser['User'])) {//user found
                            ////check if basic user is loggedin and connecting facebook with it but he already have facebook account on this site SO merge this with basic account
//                            if (isset($this->Auth->User('id')) and !empty($this->Auth->User('id')) && empty($this->Auth->User('fb_access_token'))) {
//                                ///to done later
//                            }
                            $this->Auth->login($existingUser['User']);
                            unset($_SESSION['fb_527132577379069_code']);
                            unset($_SESSION['fb_527132577379069_access_token']);
                            unset($_SESSION['fb_527132577379069_user_id']);
                            if (isset($_GET['redirect_uri']) and !empty($_GET['redirect_uri'])) {
                                header("Location: " . $_GET['redirect_uri']);
                            } else {
                                $this->redirect(array('controller' => 'shop', 'action' => 'index'));
                            }
                        } else {///user not found
                            ///check if facebook EMAIL alredy exists then save fb data to same record
                            if (isset($user_profile['email']) and !empty($user_profile['email'])) {
                                $userExistByEmail = $this->User->find('first', array('conditions' => array('User.email' => $user_profile['email'], 'User.type' => 'user')));
                            }
                            if (isset($userExistByEmail['User']['id']) and !empty($userExistByEmail['User']['id'])) {
                                $last_InserId = $userExistByEmail['User']['id'];
                            } else {///user not found in database so insert new user record
                                if (empty($user_profile['birthday'])) {
                                    $user_profile['birthday'] = "-";
                                }
                                @$UserData['User']['username'] = $user_profile['username'];
                                $UserData['User']['fb_id'] = $user_profile['id'];
                                $UserData['User']['timezone'] = $user_profile['timezone'];
                                $UserData['User']['locale'] = $user_profile['locale'];
                                $UserData['User']['fb_access_token'] = $facebook->getAccessToken();
                                $UserData['User']['status'] = '1';
                                $UserData['User']['loginby'] = 'facebook';
                                /* If user is logged in with basic accont and he is connecting facebook with it,update current user's record to allow
                                 */
                                if (isset($_SESSION['Auth']['User']['id']) and ($_SESSION['Auth']['User']['id'])) {
                                    $this->User->id = $_SESSION['Auth']['User']['id'];
                                    $last_InserId = $_SESSION['Auth']['User']['id'];
                                    $this->User->save($UserData, array('validate' => false));
                                } else {
                                    if (empty($user_profile['email'])) {
                                        $user_profile['email'] = "-";
                                    }
                                    $UserData['User']['birthday'] = $user_profile['birthday'];
                                    $UserData['User']['first_name'] = $user_profile['first_name'];
                                    $UserData['User']['last_name'] = $user_profile['last_name'];
                                    @$UserData['User']['email'] = $user_profile['email'];
                                    $UserData['User']['gender'] = $user_profile['gender'];
                                    $this->User->save($UserData, array('validate' => false));
                                    $last_InserId = $this->User->getLastInsertId();
                                }
                            }

                            $User = $this->User->find('first', array('conditions' => array('User.id' => $last_InserId)));
                            if (isset($_GET['redirect_uri']) and !empty($_GET['redirect_uri'])) {
                                $redirectVar = $_GET['redirect_uri'];
                            } else {
                                $redirectVar = BASE_URL . 'shop';
                            }
                            $this->Auth->login($User['User']);
                            unset($_SESSION['fb_' . $this->facebookAppId . '_code']);
                            unset($_SESSION['fb_' . $this->facebookAppId . '_access_token']);
                            unset($_SESSION['fb_' . $this->facebookAppId . '_user_id']);
                            //echo $redirectVar;
                            //die;
                            $this->redirect($redirectVar);
                        }
                    }
                } catch (FacebookApiException $e) {
                    error_log($e);
                    pr($e);
                    die('failed');
                    $user = null;
                }
            } else {///user is not logged in redirect to facebook
                if ($_GET['redirect_uri']) {
                    $redirect_uri = BASE_URL . 'login/loginwith/?redirect_uri=' . $_GET['redirect_uri'];
                } else {
                    $redirect_uri = BASE_URL . 'login/loginwith';
                }
                $login_url = $facebook->getLoginUrl(array('scope' => 'email,publish_stream,publish_actions', 'redirect_uri' => $redirect_uri));
                header("Location: " . $login_url);
            }
        }

        if ($provider == "twitter") {
            require_once(INCLUDE_PATH . 'socialapp/twitteroauth/twitteroauth.php');
            if (!isset($_REQUEST['oauth_token']) and !isset($_REQUEST['oauth_verifier'])) {
                if ($_GET['redirect_uri']) {
                    $redirect_uri = BASE_URL . 'login/loginwith/twitter/?redirect_uri=' . $_GET['redirect_uri'];
                } else {
                    $redirect_uri = BASE_URL . 'login/loginwith/twitter';
                }
                $callbackurl = $redirect_uri;
                /* Application Details */
                $connection = new TwitterOAuth($this->twitterConsumerKey, $this->twitterConsumerSecret);
                /* Get temporary credentials. */
                $request_token = $connection->getRequestToken($callbackurl);
                /* Save temporary credentials to session. */
                $token = $request_token['oauth_token'];
                $secret = $request_token['oauth_token_secret'];
                /* If last connection failed don't display authorization link. */
                switch ($connection->http_code) {
                    case 200:
                        /* Build authorize URL and redirect user to Twitter. */
                        $url = $connection->getAuthorizeURL($token);
                        header("Location: " . $url);
//echo"<a href='" . $url . "'>Login With Twitter </a>";
                        break;

                    default:
                        /* Show notification if something went wrong. */
                        echo 'Could not connect to Twitter. Refresh the page or try again later.';
                }
            } else {
//pr($_REQUEST);
                $connection = new TwitterOAuth($this->twitterConsumerKey, $this->twitterConsumerSecret, $_REQUEST['oauth_token'], $_REQUEST['oauth_verifier']);
                $token_credentials = $connection->getAccessToken($_REQUEST['oauth_verifier']);
                $connection = new TwitterOAuth($this->twitterConsumerKey, $this->twitterConsumerSecret, $token_credentials['oauth_token'], $token_credentials['oauth_token_secret']);
                $account = $connection->get('account/verify_credentials');
                //check if this user already exists
                $userExistByTwitterId = $this->User->find('first', array('conditions' => array('User.loginby' => 'twitter', 'User.twitter_id' => $account->id)));
                if (isset($userExistByTwitterId['User']['id']) and !empty($userExistByTwitterId['User']['id'])) {
                    $last_InserId = $userExistByTwitterId['User']['id'];
                } else {
                    $this->loadModel('User');
                    $UserData['User']['twitter_id'] = $account->id;
                    $UserData['User']['twitter_oauth_token'] = $token_credentials['oauth_token'];
                    $UserData['User']['twitter_oauth_token_secret'] = $token_credentials['oauth_token_secret'];
                    $UserData['User']['username'] = $account->screen_name;
                    $UserData['User']['image_url'] = $account->profile_image_url;
                    $UserData['User']['locale'] = $account->lang;
                    $UserData['User']['loginby'] = 'twitter';

                    /* If user is logged in with basic accont and he is connecting facebook with it,update current user's record to allow
                     */
                    if (isset($_SESSION['Auth']['User']['id']) and ($_SESSION['Auth']['User']['id'])) {
                        $this->User->id = $_SESSION['Auth']['User']['id'];
                        $last_InserId = $_SESSION['Auth']['User']['id'];
                        $this->User->save($UserData, array('validate' => false));
                    } else {
                        $UserData['User']['first_name'] = $account->name;
                        $UserData['User']['status'] = 1;
                        $this->User->save($UserData, array('validate' => FALSE));
                        $last_InserId = $this->User->getLastInsertId();
                    }
                }
                $User = $this->User->find('first', array('conditions' => array('User.id' => $last_InserId)));
                $this->Auth->login($User['User']);
                if (isset($_GET['redirect_uri']) and !empty($_GET['redirect_uri'])) {
                    header("Location: " . $_GET['redirect_uri']);
                } else {
                    $this->redirect(array('controller' => 'shop', 'action' => 'index'));
                }
            }
        }

        if ($provider == "linkedin") {
            require_once(INCLUDE_PATH . 'socialapp/linkedin/OAuth.php');
            $linkedin = new linkedinoauth();
// Change these
            define('API_KEY', 'bp9sbfp7e8qp');
            define('API_SECRET', 'IOqK4F4lty8DWqnd');
            define('REDIRECT_URI', BASE_URL . "login/loginwith/linkedin");
            define('SCOPE', 'r_fullprofile r_emailaddress rw_nus');

// You'll probably use a database
// OAuth 2 Control Flow
            if (isset($_GET['error'])) {
// LinkedIn returned an error
                print $_GET['error'] . ': ' . $_GET['error_description'];
                exit;
            } elseif (isset($_GET['code'])) {
// User authorized your application
                if ($_SESSION['state'] == $_GET['state']) {
// Get token so you can make API calls
                    $linkedin->getAccessToken();
                } else {
// CSRF attack? Or did you mix up your states?
                    exit;
                }
            } else {
                if ((empty($_SESSION['expires_at'])) || (time() > $_SESSION['expires_at'])) {
// Token has expired, clear the state
                    $_SESSION = array();
                }
                if (empty($_SESSION['access_token'])) {
// Start authorization process
                    $linkedin->getAuthorizationCode();
                }
            }

// Congratulations! You have a valid token. Now fetch your profile 
            $user = $linkedin->fetch('GET', '/v1/people/~');
            $user_email = $linkedin->fetch('GET', '/v1/people/~/email-address');

            $this->loadModel('User');
            $UserData['User']['email'] = $user_email;
            $UserData['User']['fullname'] = $user->firstName . " " . $user->lastName;
            $UserData['User']['username'] = strtolower($user->firstName . "_" . $user->lastName);
            $UserData['User']['linkedin_profilerequesturl'] = $user->siteStandardProfileRequest->url;
            $UserData['User']['status'] = 1;
            $UserData['User']['loginby'] = 'linkedin';
            $this->User->save($UserData['User']);
            $last_InserId = $this->User->getLastInsertId();

            $User = $this->User->find('first', array('conditions' => array('User.id' => $last_InserId, 'User.loginby' => 'linkedin')));
            $this->Auth->login($User['User']);
            unset($_SESSION['access_token']);
            unset($_SESSION['expires_in']);
            unset($_SESSION['expires_at']);
            unset($_SESSION['state']);
            $this->redirect(array('controller' => 'dashboard', 'action' => 'index'));
        }

        if ($provider == "googleplus") {

            require_once INCLUDE_PATH . 'socialapp/googleplus/Google_Client.php';
            require_once INCLUDE_PATH . 'socialapp/googleplus/contrib/Google_PlusService.php';

            $client = new Google_Client();
            $client->setApplicationName("Recycled");


// Visit https://code.google.com/apis/console?api=plus to generate your
// client id, client secret, and to register your redirect uri.
            $client->setClientId($this->googleClientId);
            $client->setClientSecret($this->googleSecretKey);
            $client->setRedirectUri(urldecode(BASE_URL . 'login/loginwith/googleplus'));




//$client->setDeveloperKey('insert_your_developer_key');
            $plus = new Google_PlusService($client);


            if (isset($_GET['logout'])) {
                unset($_SESSION['token']);
            }

            if (isset($_GET['code'])) {
                if (strval($_SESSION['state']) !== strval($_GET['state'])) {
                    die("The session state did not match.");
                }
                $client->authenticate();
                $_SESSION['token'] = $client->getAccessToken();
                $redirect = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];
                header('Location: ' . BASE_URL . "login/loginwith/googleplus");
            }
            if (isset($_SESSION['token'])) {
                $client->setAccessToken($_SESSION['token']);
            }
            //die;
            if ($access_token = $client->getAccessToken()) {
                $access_token = json_decode($access_token, true);
                $me = $plus->people->get('me');
// print "Your Profile: <pre>" . print_r($me, true) . "</pre>";
                $userExistByGooglplusId = $this->User->find('first', array('conditions' => array('User.loginby' => 'googleplus', 'User.googleplus_id' => $me['id'])));
                if (isset($userExistByGooglplusId['User']['id']) and !empty($userExistByGooglplusId['User']['id'])) {
                    $last_InserId = $userExistByGooglplusId['User']['id'];
                } else {
                    $this->loadModel('User');
                    $UserData['User']['googleplus_id'] = $me['id'];
                    $UserData['User']['google_access_token'] = $access_token['access_token'];
                    $UserData['User']['google_id_token'] = $access_token['id_token'];
                    $UserData['User']['loginby'] = 'googleplus';
                    /* If user is logged in with basic accont and he is connecting facebook with it,update current user's record to allow
                     */
                    if (isset($_SESSION['Auth']['User']['id']) and ($_SESSION['Auth']['User']['id'])) {
                        $this->User->id = $_SESSION['Auth']['User']['id'];
                        $last_InserId = $_SESSION['Auth']['User']['id'];
                        $this->User->save($UserData, array('validate' => false));
                    } else {
                        $UserData['User']['first_name'] = $me['displayName'];
                        $UserData['User']['username'] = strtolower(str_replace(" ", "_", $me['displayName']));
                        $UserData['User']['gender'] = $me['gender'];
                        $UserData['User']['locale'] = $me['language'];
                        $UserData['User']['image_url'] = $me['image']['url'];
                        $UserData['User']['status'] = 1;
                        $this->User->save($UserData, array('validate' => FALSE));
                        $last_InserId = $this->User->getLastInsertId();
                    }
                }
                $User = $this->User->find('first', array('conditions' => array('User.id' => $last_InserId, 'User.loginby' => 'googleplus')));
                $this->Auth->login($User['User']);
// The access token may have been updated lazily.
                $_SESSION['token'] = $client->getAccessToken();
                $stateArray = json_decode(urldecode($_SESSION['state']), true);
                unset($_SESSION['state']);
                unset($_SESSION['token']);
                if (isset($stateArray['redirect_url']) and !empty($stateArray['redirect_url'])) {
                    echo $stateArray['redirect_url'];
                    header("Location: " . $stateArray['redirect_url']);
                } else {
                    $this->redirect(array('controller' => 'shop', 'action' => 'index'));
                }

//$params = array('maxResults' => 100);
//$activities = $plus->activities->listActivities('me', 'public', $params);
//print "Your Activities: <pre>" . print_r($activities, true) . "</pre>";
//                $params = array(
//                    'orderBy' => 'best',
//                    'maxResults' => '20',
//                );
//                $results = $plus->activities->search('Google+ API', $params);
//                foreach ($results['items'] as $result) {
//                    print "Search Result: <pre>{$result['object']['content']}</pre>\n";
//                }
            } else {
                if (isset($_GET['redirect_url']) and !empty($_GET['redirect_url'])) {
                    //$client->setRedirectUri(BASE_URL . 'login/loginwith/googleplus?redirect_url=' . $_GET['redirect_url']);
                    $stateArr = array('redirect_url' => $_GET['redirect_url']);
                    $state = json_encode($stateArr);
                } else {
                    $state = mt_rand();
                }
                $client->setState($state);
                $client->setAccessType('online');
                $client->setApprovalPrompt('auto');
                $_SESSION['state'] = $state;
//                pr($client);
//
                $authUrl = $client->createAuthUrl();
                //echo $authUrl;
                //die;
//                if (isset($_GET['redirect_url']) and !empty($_GET['redirect_url'])) {
//                    header("Location: " . $authUrl . '&redirect_url=' . urlencode($_GET['redirect_url']));
//                } else {
                header("Location: " . $authUrl);
                // }
//print "<a class='login' href='$authUrl'>Connect Me!</a>";
            }
        }
    }
